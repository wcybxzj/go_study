1.go build:
普通包:
go build之后，它不会产生任何文件。如果你需要在$GOPATH/pkg下生成相应的文件，那就得执行go install

main包:
go build之后，在当前目录生成可执行文件。
如果你需要在$GOPATH/bin下生成相应的文件，需要执行go install，或者使用go build -o /path/ybx.exe。

如果某个项目文件夹下有多个文件，而你只想编译某个文件:
就可在go build之后加上文件名，例如go build a.go；go build命令默认会编译当前目录下的所有go文件。

指定编译输出的文件名:
例如1.2节中的mathapp应用，我们可以指定go build -o astaxie.exe，默认情况是你的package名(非main包)，或者是第一个源文件的文件名(main包)。

go build会忽略目录下以“_”或“.”开头的go文件。

如果源代码针对不同的操作系统需要不同的处理，你可以根据不同的操作系统后缀来命名文件。
例如有一个读取数组的程序，它对于不同的操作系统可能有如下几个源文件：
array_linux.go array_darwin.go array_windows.go array_freebsd.go
go build的时候会选择性地编译以系统名结尾的文件（Linux、Darwin、Windows、Freebsd）。
例如Linux系统下面编译只会选择array_linux.go文件，其它系统命名后缀文件全部忽略。

参数的介绍
	-o 指定输出的文件名，可以带上路径，例如 go build -o a/b/c
	-i 安装相应的包，编译+go install
	-a 更新全部已经是最新的包的，但是对标准包不适用
	-n 把需要执行的编译命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的
	-p n 指定可以并行可运行的编译数目，默认是CPU数目
	-race 开启编译的时候自动检测数据竞争的情况，目前只支持64位的机器
	-v 打印出来我们正在编译的包名
	-work 打印出来编译时候的临时文件夹名称，并且如果已经存在的话就不要删除
	-x 打印出来执行的命令，其实就是和-n的结果类似，只是这个会执行
	-ccflags 'arg list' 传递参数给5c, 6c, 8c 调用
	-compiler name 指定相应的编译器，gccgo还是gc
	-gccgoflags 'arg list' 传递参数给gccgo编译连接调用
	-gcflags 'arg list' 传递参数给5g, 6g, 8g 调用
	-installsuffix suffix 为了和默认的安装包区别开来，采用这个前缀来重新安装那些依赖的包，-race的时候默认已经是-installsuffix race,大家可以通过-n命令来验证
	-ldflags 'flag list' 传递参数给5l, 6l, 8l 调用
	-tags 'tag list' 设置在编译的时候可以适配的那些tag，详细的tag限制参考里面的 Build Constraints

============================================================================================
go clean
这个命令是用来移除当前源码包和关联源码包里面编译生成的文件。这些文件包括
_obj/            旧的object目录，由Makefiles遗留
_test/           旧的test目录，由Makefiles遗留
_testmain.go     旧的gotest文件，由Makefiles遗留
test.out         旧的test记录，由Makefiles遗留
build.out        旧的test记录，由Makefiles遗留
*.[568ao]        object文件，由Makefiles遗留

DIR(.exe)        由go build产生
DIR.test(.exe)   由go test -c产生
MAINFILE(.exe)   由go build MAINFILE.go产生
*.so             由 SWIG 产生

我一般都是利用这个命令清除编译文件，然后github递交源码，
在本机测试的时候这些编译文件都是和系统相关的，但是对于源码管理来说没必要。
$ go clean -i -n
cd /Users/astaxie/develop/gopath/src/mathapp
rm -f mathapp mathapp.exe mathapp.test mathapp.test.exe app app.exe
rm -f /Users/astaxie/develop/gopath/bin/mathapp

参数介绍:
	-i 清除关联的安装的包和可运行文件，也就是通过go install安装的文件
	-n 把需要执行的清除命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的
	-r 循环的清除在import中引入的包
	-x 打印出来执行的详细命令，其实就是-n打印的执行版本
============================================================================================
go fmt:
go fmt 1.go
go fmt 底层调用gofmt
gofmt -w -l src，可以格式化整个项目

gofmt的参数介绍:
	-l 显示那些需要格式化的文件
	-w 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出。
	-r 添加形如“a[b:len(a)] -> a[b:]”的重写规则，方便我们做批量替换
	-s 简化文件中的代码
	-d 显示格式化前后的diff而不是写入文件，默认是false
	-e 打印所有的语法错误到标准输出。如果不使用此标记，则只会打印不同行的前10个错误。
	-cpuprofile 支持调试模式，写入相应的cpufile到指定的文件
============================================================================================
go get:
第一步是下载源码包，第二步是执行go install。下载源码包的go工具会自动根据不同的域名调用不同的源码工具，对应关系如下：
参数介绍：
	-d 只下载不安装
	-f 只有在你包含了-u参数的时候才有效，不让-u去验证import中的每一个都已经获取了，这对于本地fork的包特别有用
	-fix 在获取源码之后先运行fix，然后再去做其他的事情
	-t 同时也下载需要为运行测试所需要的包
	-u 强制使用网络去更新包和它的依赖包
	-v 显示执行的命令


============================================================================================
go install:
这个命令在内部实际上分成了两步操作：第一步是生成结果文件(可执行文件或者.a包)，第二步会把编译好的结果移到$GOPATH/pkg或者$GOPATH/bin。
参数支持go build的编译参数。大家只要记住一个参数-v就好了，这个随时随地的可以查看底层的执行信息。

============================================================================================
go test:
执行这个命令，会自动读取源码目录下面名为*_test.go的文件，生成并运行测试用的可执行文件。输出的信息类似
默认的情况下，不需要任何的参数，它会自动把你源码包下面所有test文件测试完毕，当然你也可以带上参数，详情请参考go help testflag

这里我介绍几个我们常用的参数：
	-bench regexp 执行相应的benchmarks，例如 -bench=.
	-cover 开启测试覆盖率
	-run regexp 只运行regexp匹配的函数，例如 -run=Array 那么就执行包含有Array开头的函数
	-v 显示测试的详细命令
============================================================================================
go tool:
go tool下面下载聚集了很多命令，这里我们只介绍两个，fix和vet
go tool fix . 用来修复以前老版本的代码到新版本，例如go1之前老版本的代码转化到go1,例如API的变化
go tool vet directory|files 用来分析当前目录的代码是否都是正确的代码,
例如是不是调用fmt.Printf里面的参数不正确，
例如函数里面提前return了然后出现了无用代码之类的。
============================================================================================
go generate:
============================================================================================
godoc
go get golang.org/x/tools/cmd/godoc
godoc -http=:8080。然后在浏览器中打开127.0.0.1:8080
============================================================================================
go version 查看go当前的版本
go env 查看当前go的环境变量
go list 列出当前全部安装的package
go run 编译并运行Go程序
============================================================================================
============================================================================================
