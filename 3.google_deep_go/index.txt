======================4结构/包/类型======================================
./4.struct_and_package/4_2.tree/index.txt
封装:
字母大写:public
字母小写:private
针对包来说的包:
每个目录一个包, package名和目录名字可以不一样
main包 包含可执行的入口 main函数
main.go需要单独存在于一级目录
为结构定义的方法必须在一个包内,可以是不同的文件

./4.struct_and_package/4_3.extend_type/index.txt
1.go中扩展不使用继承, 而是去扩充系统类型或者第三方的类型
方法有2种:
定义别名
使用组合
实例:
1.tree:使用组合扩展原有类型
2.queue:使用别名扩展原有类型
========================5接口=========================================
1.retriever:接口的定义和实现
2.queue:inretface{}
3.retriever:组合借口
4.Go3大借口Stringer, Reader, Writer
fmt.Stringer:相当于toString()
io.Reader, io.Writer:让任何其他类型支持读写,不仅仅是文件,只要实现这个两个借口
========================6函数式编程====================================
例1:斐波那契数列(golang闭包使用)
例2:为函数实现接口
例3:使用函数来遍历二叉树
golang没有lambda,但是有匿名函数,因为已经有匿名函数了不想更负载
=========================7错误处理和资源管理============================
1.defer:
2.err:
3.filelistingserver:服务器统一错误处理
4.panic:
	含义:
		程序不知道如何处理了,所以尽量少用,因为程序应尽量处理各种情况
		类似其他语言的throw
	行为:
		停止当前函数执行
		一直向上返回执行每一次层的defer
		如果没有遇到recover,程序就退出
	参数:
		interface{}任务类型
5.recover:
	行为:
		仅在defer调用中使用
		获取panic的值
		如果无法处理可以重新panic
	类型:
		interface{}任务类型

===============================8.测试====================================
传统测试vs表格式测试

传统测试的缺点:
测试数据和测试逻辑混在一起:乱
出错信息不明显:出错了要去看代码
一旦出错,就挂掉:改完又挂掉,又改又挂

表格驱动测试:
分离测试数据和测试逻辑
明确出错信息
可以部分失败

cd /root/www/go_www/src/go_study/3.google_deep_go/5.interface/2.queue
go doc Queue
type Queue []interface{}
限定方法1:在声明时候限定Queue中的元素类型 type Queue []int
func (q *Queue) IsEmpty() bool
func (q *Queue) Pop() interface{}
func (q *Queue) Pop2() int
func (q *Queue) Push(v interface{})
func (q *Queue) Push2(v int)
func (q *Queue) Push3(v interface{})

godoc  -http :1234

===============================9.goroutine====================================
1.golang的协程是非抢占式并发:
解释:
例如10个协程在4个cpu的机器上跑,如果不执行io或者Gosched,
	那么一开始跑在4个cpu上的协程将一直占用cpu,其余6个协程和1个主协程没机会去执行

2.c的线程是抢占式并发:
解释:
例如10个thread在4个cpu的机器上跑,10个线程和1个主线程都有机会通过时间片轮转去进行执行
===============================10.channel====================================
channel基础
WaitGroup等待goroutine结束
channel来遍历树
select+timer
传统并发机制
===============================11.标准库====================================
http:
使用http客户端发送请求
使用http.Client控制请求头部
使用httputil简化工作


===============================12.====================================
===============================13.====================================
===============================14.====================================
go get -v golang.org/x/text
go get -v golang.org/x/net
===============================15.regex====================================
html的内容3种方法:css选择器/xpath/正则

1.css选择器:
chrome f12
1-1.获取id=cityList中的html
在console中输入
$("#cityList")
输出中找0-->childNoeds-->outerHTML
1-2.获取id=cityList下dd下的a
$("#cityList>dd>a")
输出中outerText就是城市名

2.使用xpath获取元素:

===============================16.crawler====================================
1.获取网页内容
a)http.get获取内容
b)Encoding:gbk->utf8
c)charset.DetermineEncoding来判断编码

2.获取城市名字和链接
正则

3.category of parser:
city list parser:
city parser:
user parser:

4.Parser:
Core concept: diff url corresponding to diff parser
Input:utf-8
Out:Request{URL, parser}List, Item List

5.第二次感受到闭包的巧妙:
代码:15.crawler_single_task/zhenai/parser/city.go的ParseCity()
//问题:ParseProfile是两个参数,
//原先engine.Requst.ParserFunc定义的是1个参数,
//ParseProfile不能作用在可原先engine.Requst.ParserFunc
//写法1:不使用闭包
//修改点1:修改engine.Requst.ParserFunc成2个参数,
//修改点2:并且还要修改 ParserCityList() ParseCity()改成2参数,即使没有也要定义,还要改调用的地方
//写法2:使用闭包
//原来结构体engine.Requst.ParserFunc不用改
//原来相关函数(ParserCityList() ParseCity())都不用改
//闭包注意点:闭包中如果使用循环中的变量要复制给别的变量





===================================================================

===================================================================

===================================================================