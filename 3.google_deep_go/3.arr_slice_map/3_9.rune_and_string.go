package main

import (
	"fmt"
	"unicode/utf8"
)

/*
yes我爱慕课网!
=======================================================
19
=======================================================
Rune count: 9
=======================================================
(0, 79) (1, 65) (2, 73) (3, E6) (4, 88) (5, 91) (6, E7) (7, 88) (8, B1) (9, E6) (10, 85) (11, 95) (12, E8) (13, AF) (14, BE) (15, E7) (16, BD) (17, 91) (18, 21)
   y       e       s               我                     爱                       慕                         课                        网                 !
=======================================================
(0, 79, y)(1, 65, e)(2, 73, s)(3, 6211, 我)(6, 7231, 爱)(9, 6155, 慕)(12, 8BFE, 课)(15, 7F51, 网)(18, 21, !))
这里看到中文转成2个字节的UniCode: 6211,7231,6155,8BFE,7F51
从索引上来看是把3个字节UTF_8转成2个字节UniCode
=======================================================
y e s 我 爱 慕 课 网 !
=======================================================
(0 y)(1 e)(2 s)(3 我)(4 爱)(5 慕)(6 课)(7 网)(8 !)
*/

func test1() {
	s := "yes我爱慕课网!"
	fmt.Println(s) //
	fmt.Println("=======================================================")
	//在默认情况下的字符数
	fmt.Println(len(s)) //19个字节
	fmt.Println("=======================================================")
	//在utf8.rune模式下的字符数:
	fmt.Println("Rune count:", utf8.RuneCountInString(s)) //9个rune长度
	fmt.Println("=======================================================")
	//方法1:索引是连贯的查看每个字节, 观察到UTF_8编码,1个中文占3个字节
	for i, b := range []byte(s) {
		fmt.Printf("(%d, %X) ", i, b) //每个字符以16进制显示
	}
	fmt.Println()
	fmt.Println("=======================================================")
	//方法2:索引不连贯
	for i, ch := range s { //ch 32位/4字节/int32, 其实就是rune
		fmt.Printf("(%d, %X, %c)", i, ch, ch) //
	}
	fmt.Println()
	fmt.Println("=======================================================")
	//方法3:
	//[]byte可以将string类型转成字节切片
	bytes := []byte(s)
	for len(bytes) > 0 {
		//ch:是字符 ，size:是长度 中文3 英文1
		ch, size := utf8.DecodeRune(bytes)
		//fmt.Println(ch, size)
		bytes = bytes[size:]
		fmt.Printf("%c ", ch)
	}
	fmt.Println()
	fmt.Println("=======================================================")
	//方法4:最常用的办法:新开一个rune数组来保存
	for i, ch := range []rune(s) {
		fmt.Printf("(%d %c)", i, ch)
	}
	fmt.Println()

}

//rune可以理解成golang的char,
//但是rune是4字节,避免C语言char在多字节语言中的问题
func main() {
	test1()
}
